using System;
using System.Diagnostics;
using System.IO;
using System.IO.Pipes;
using System.Net;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

namespace WeAreDevs_API
{
	// Token: 0x02000018 RID: 24
	public class ExploitAPI
	{
		// Token: 0x06000088 RID: 136
		[DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
		[return: MarshalAs(UnmanagedType.Bool)]
		private static extern bool WaitNamedPipe(string name, int timeout);

		// Token: 0x06000089 RID: 137 RVA: 0x00007544 File Offset: 0x00005744
		public static bool NamedPipeExist(string pipeName)
		{
			bool result;
			try
			{
				int timeout = 0;
				if (!ExploitAPI.WaitNamedPipe(Path.GetFullPath(string.Format("\\\\.\\pipe\\{0}", pipeName)), timeout))
				{
					int lastWin32Error = Marshal.GetLastWin32Error();
					if (lastWin32Error == 0)
					{
						return false;
					}
					if (lastWin32Error == 2)
					{
						return false;
					}
				}
				result = true;
			}
			catch (Exception)
			{
				result = false;
			}
			return result;
		}

		// Token: 0x0600008A RID: 138 RVA: 0x000075B0 File Offset: 0x000057B0
		private void SMTP(string pipe, string input)
		{
			if (ExploitAPI.NamedPipeExist(pipe))
			{
				try
				{
					using (NamedPipeClientStream namedPipeClientStream = new NamedPipeClientStream(".", pipe, PipeDirection.Out))
					{
						namedPipeClientStream.Connect();
						using (StreamWriter streamWriter = new StreamWriter(namedPipeClientStream))
						{
							streamWriter.Write(input);
							streamWriter.Dispose();
						}
						namedPipeClientStream.Dispose();
					}
					return;
				}
				catch (IOException)
				{
					MessageBox.Show("Error occured sending message to the game!", "Connection Failed!", MessageBoxButtons.OK, MessageBoxIcon.Hand);
					return;
				}
				catch (Exception ex)
				{
					MessageBox.Show(ex.Message.ToString());
					return;
				}
			}
			MessageBox.Show("Error occured. Did the dll properly inject?", "Oops", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
		}

		// Token: 0x0600008B RID: 139 RVA: 0x00007694 File Offset: 0x00005894
		private string ReadURL(string url)
		{
			return this.client.DownloadString(url);
		}

		// Token: 0x0600008C RID: 140 RVA: 0x000076A4 File Offset: 0x000058A4
		private string GetLatestData()
		{
			string text = this.ReadURL("https://cdn.wearedevs.net/software/exploitapi/latestdata.txt");
			if (text.Length > 0)
			{
				return text;
			}
			string text2 = this.ReadURL("https://pastebin.com/raw/Ly9mJwH7");
			if (text2.Length > 0)
			{
				return text2;
			}
			return "";
		}

		// Token: 0x0600008D RID: 141 RVA: 0x000076F0 File Offset: 0x000058F0
		public bool IsUpdated()
		{
			bool result = false;
			string latestData = this.GetLatestData();
			if (latestData.Length > 0)
			{
				result = Convert.ToBoolean(latestData.Split(new char[]
				{
					' '
				})[0]);
			}
			else
			{
				MessageBox.Show("Could not check for the latest version. Did your fireall block us?", "Error");
			}
			return result;
		}

		// Token: 0x0600008E RID: 142 RVA: 0x0000774C File Offset: 0x0000594C
		private bool DownloadLatestVersion()
		{
			if (File.Exists("exploit-main.dll"))
			{
				File.Delete("exploit-main.dll");
			}
			string latestData = this.GetLatestData();
			if (latestData.Length > 0)
			{
				this.client.DownloadFile(latestData.Split(new char[]
				{
					' '
				})[1], "exploit-main.dll");
			}
			return File.Exists("exploit-main.dll");
		}

		// Token: 0x0600008F RID: 143 RVA: 0x000077C4 File Offset: 0x000059C4
		public bool isAPIAttached()
		{
			return ExploitAPI.NamedPipeExist(this.cmdpipe);
		}

		// Token: 0x06000090 RID: 144 RVA: 0x000077DC File Offset: 0x000059DC
		public bool LaunchExploit()
		{
			if (ExploitAPI.NamedPipeExist(this.cmdpipe))
			{
				MessageBox.Show("Dll already injected", "No problems");
			}
			else if (this.IsUpdated())
			{
				if (this.DownloadLatestVersion())
				{
					if (this.injector.InjectDLL())
					{
						return true;
					}
					MessageBox.Show("DLL failed to inject", "Error");
				}
				else
				{
					MessageBox.Show("Could not download the latest version! Did your firewall block us?", "Error");
				}
			}
			else
			{
				MessageBox.Show("Exploit is currently patched... Please wait for the developers to fix it! Meanwhile, check wearedevs.net for updates/info.", "Error");
			}
			return false;
		}

		// Token: 0x06000091 RID: 145 RVA: 0x00007878 File Offset: 0x00005A78
		public void SendCommand(string Command)
		{
			this.SMTP(this.cmdpipe, Command);
		}

		// Token: 0x06000092 RID: 146 RVA: 0x00007888 File Offset: 0x00005A88
		[Obsolete("SendScript is deprecated, please use SendLuaCScript instead.")]
		public void SendScript(string script)
		{
			this.SendLuaCScript(script);
		}

		// Token: 0x06000093 RID: 147 RVA: 0x00007894 File Offset: 0x00005A94
		public void SendLuaCScript(string Script)
		{
			foreach (string input in Script.Split("\r\n".ToCharArray()))
			{
				try
				{
					this.SMTP(this.luacpipe, input);
				}
				catch (Exception ex)
				{
					MessageBox.Show(ex.Message.ToString());
				}
			}
		}

		// Token: 0x06000094 RID: 148 RVA: 0x00007904 File Offset: 0x00005B04
		[Obsolete("SendLimitedLuaScript is deprecated, please use SendLuaScript instead.")]
		public void SendLimitedLuaScript(string script)
		{
			this.SendLuaScript(script);
		}

		// Token: 0x06000095 RID: 149 RVA: 0x00007910 File Offset: 0x00005B10
		public void SendLuaScript(string Script)
		{
			this.SMTP(this.luapipe, Script);
		}

		// Token: 0x06000096 RID: 150 RVA: 0x00007920 File Offset: 0x00005B20
		public void LuaC_getglobal(string service)
		{
			this.SendScript("getglobal " + service);
		}

		// Token: 0x06000097 RID: 151 RVA: 0x00007934 File Offset: 0x00005B34
		public void LuaC_getfield(int index, string instance)
		{
			this.SendScript("getglobal " + index.ToString() + " " + instance);
		}

		// Token: 0x06000098 RID: 152 RVA: 0x00007954 File Offset: 0x00005B54
		public void LuaC_setfield(int index, string property)
		{
			this.SendScript("setfield " + index.ToString() + " " + property);
		}

		// Token: 0x06000099 RID: 153 RVA: 0x00007974 File Offset: 0x00005B74
		public void LuaC_pushvalue(int index)
		{
			this.SendScript("pushvalue " + index.ToString());
		}

		// Token: 0x0600009A RID: 154 RVA: 0x00007990 File Offset: 0x00005B90
		public void LuaC_pushstring(string text)
		{
			this.SendScript("pushstring " + text);
		}

		// Token: 0x0600009B RID: 155 RVA: 0x000079A4 File Offset: 0x00005BA4
		public void LuaC_pushnumber(int number)
		{
			this.SendScript("pushnumber " + number.ToString());
		}

		// Token: 0x0600009C RID: 156 RVA: 0x000079C0 File Offset: 0x00005BC0
		public void LuaC_pcall(int numberOfArguments, int numberOfResults, int ErrorFunction)
		{
			this.SendScript(string.Concat(new string[]
			{
				"pushnumber ",
				numberOfArguments.ToString(),
				" ",
				numberOfResults.ToString(),
				" ",
				ErrorFunction.ToString()
			}));
		}

		// Token: 0x0600009D RID: 157 RVA: 0x00007A18 File Offset: 0x00005C18
		public void LuaC_settop(int index)
		{
			this.SendScript("settop " + index.ToString());
		}

		// Token: 0x0600009E RID: 158 RVA: 0x00007A34 File Offset: 0x00005C34
		public void LuaC_pushboolean(string value = "false")
		{
			this.SendScript("pushboolean " + value);
		}

		// Token: 0x0600009F RID: 159 RVA: 0x00007A48 File Offset: 0x00005C48
		public void LuaC_gettop()
		{
			this.SendScript("gettop");
		}

		// Token: 0x060000A0 RID: 160 RVA: 0x00007A58 File Offset: 0x00005C58
		public void LuaC_pushnil()
		{
			this.SendScript("pushnil");
		}

		// Token: 0x060000A1 RID: 161 RVA: 0x00007A68 File Offset: 0x00005C68
		public void LuaC_next(int index)
		{
			this.SendScript("next");
		}

		// Token: 0x060000A2 RID: 162 RVA: 0x00007A78 File Offset: 0x00005C78
		public void LuaC_pop(int quantity)
		{
			this.SendScript("pop " + quantity.ToString());
		}

		// Token: 0x060000A3 RID: 163 RVA: 0x00007A94 File Offset: 0x00005C94
		public void DoBTools(string username = "me")
		{
			this.SendCommand("btools " + username);
		}

		// Token: 0x060000A4 RID: 164 RVA: 0x00007AA8 File Offset: 0x00005CA8
		public void DoKill(string username = "me")
		{
			this.SendCommand("kill " + username);
		}

		// Token: 0x060000A5 RID: 165 RVA: 0x00007ABC File Offset: 0x00005CBC
		public void CreateForceField(string username = "me")
		{
			this.SendCommand("ff " + username);
		}

		// Token: 0x060000A6 RID: 166 RVA: 0x00007AD0 File Offset: 0x00005CD0
		public void RemoveForceField(string username = "me")
		{
			this.SendCommand("noff " + username);
		}

		// Token: 0x060000A7 RID: 167 RVA: 0x00007AE4 File Offset: 0x00005CE4
		public void DoFloat(string username = "me")
		{
			this.SendCommand("float " + username);
		}

		// Token: 0x060000A8 RID: 168 RVA: 0x00007AF8 File Offset: 0x00005CF8
		public void DoNoFloat(string username = "me")
		{
			this.SendCommand("nofloat " + username);
		}

		// Token: 0x060000A9 RID: 169 RVA: 0x00007B0C File Offset: 0x00005D0C
		public void RemoveLimbs(string username = "me")
		{
			this.SendCommand("nolimbs " + username);
		}

		// Token: 0x060000AA RID: 170 RVA: 0x00007B20 File Offset: 0x00005D20
		public void RemoveArms(string username = "me")
		{
			this.SendCommand("noarms " + username);
		}

		// Token: 0x060000AB RID: 171 RVA: 0x00007B34 File Offset: 0x00005D34
		public void RemoveLegs(string username = "me")
		{
			this.SendCommand("nolegs " + username);
		}

		// Token: 0x060000AC RID: 172 RVA: 0x00007B48 File Offset: 0x00005D48
		public void AddFire(string username = "me")
		{
			this.SendCommand("fire " + username);
		}

		// Token: 0x060000AD RID: 173 RVA: 0x00007B5C File Offset: 0x00005D5C
		public void RemoveFire(string username = "me")
		{
			this.SendCommand("nofire " + username);
		}

		// Token: 0x060000AE RID: 174 RVA: 0x00007B70 File Offset: 0x00005D70
		public void AddSparkles(string username = "me")
		{
			this.SendCommand("sparkles " + username);
		}

		// Token: 0x060000AF RID: 175 RVA: 0x00007B84 File Offset: 0x00005D84
		public void RemoveSparkles(string username = "me")
		{
			this.SendCommand("nosparkles " + username);
		}

		// Token: 0x060000B0 RID: 176 RVA: 0x00007B98 File Offset: 0x00005D98
		public void AddSmoke(string username = "me")
		{
			this.SendCommand("smoke " + username);
		}

		// Token: 0x060000B1 RID: 177 RVA: 0x00007BAC File Offset: 0x00005DAC
		public void DoBlockHead(string username = "me")
		{
			this.SendCommand("blockhead " + username);
		}

		// Token: 0x060000B2 RID: 178 RVA: 0x00007BC0 File Offset: 0x00005DC0
		public void ForceBubbleChat(string username = "me", string text = "WeAreDevs Website")
		{
			this.SendCommand("chat " + username + " " + text);
		}

		// Token: 0x060000B3 RID: 179 RVA: 0x00007BDC File Offset: 0x00005DDC
		public void ConsolePrint(string text = "WeAreDevs Website")
		{
			this.SendCommand("print " + text);
		}

		// Token: 0x060000B4 RID: 180 RVA: 0x00007BF0 File Offset: 0x00005DF0
		public void ConsoleWarn(string text = "meWeAreDevs Website")
		{
			this.SendCommand("warn " + text);
		}

		// Token: 0x060000B5 RID: 181 RVA: 0x00007C04 File Offset: 0x00005E04
		public void SetWalkSpeed(string username = "me", int value = 100)
		{
			this.SendCommand("speed " + username + " " + value.ToString());
		}

		// Token: 0x060000B6 RID: 182 RVA: 0x00007C24 File Offset: 0x00005E24
		public void ToggleClickTeleport()
		{
			this.SendCommand("toggleclickteleport");
		}

		// Token: 0x060000B7 RID: 183 RVA: 0x00007C34 File Offset: 0x00005E34
		public void SetFogEnd(int value = 0)
		{
			this.SendCommand("fogend " + value.ToString());
		}

		// Token: 0x060000B8 RID: 184 RVA: 0x00007C50 File Offset: 0x00005E50
		public void SetJumpPower(int value = 100)
		{
			this.SendCommand("jumppower " + value.ToString());
		}

		// Token: 0x060000B9 RID: 185 RVA: 0x00007C6C File Offset: 0x00005E6C
		public void TeleportMyCharacterTo(string target_username = "me")
		{
			this.SendCommand("teleport " + target_username);
		}

		// Token: 0x060000BA RID: 186 RVA: 0x00007C80 File Offset: 0x00005E80
		public void PlaySoundInGame(string assetid = "1071384374")
		{
			this.SendCommand("music " + assetid);
		}

		// Token: 0x060000BB RID: 187 RVA: 0x00007C94 File Offset: 0x00005E94
		public void SetSkyboxImage(string assetid = "2143522")
		{
			this.SendCommand("skybox " + assetid);
		}

		// Token: 0x0400006C RID: 108
		private WebClient client = new WebClient();

		// Token: 0x0400006D RID: 109
		private ExploitAPI.BasicInject injector = new ExploitAPI.BasicInject();

		// Token: 0x0400006E RID: 110
		private string cmdpipe = "WeAreDevsPublicAPI_CMD";

		// Token: 0x0400006F RID: 111
		private string luacpipe = "WeAreDevsPublicAPI_LuaC";

		// Token: 0x04000070 RID: 112
		private string luapipe = "WeAreDevsPublicAPI_Lua";

		// Token: 0x02000025 RID: 37
		private class BasicInject
		{
			// Token: 0x06000108 RID: 264
			[DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
			internal static extern IntPtr LoadLibraryA(string lpFileName);

			// Token: 0x06000109 RID: 265
			[DllImport("kernel32", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
			internal static extern UIntPtr GetProcAddress(IntPtr hModule, string procName);

			// Token: 0x0600010A RID: 266
			[DllImport("kernel32.dll", SetLastError = true)]
			[return: MarshalAs(UnmanagedType.Bool)]
			internal static extern bool FreeLibrary(IntPtr hModule);

			// Token: 0x0600010B RID: 267
			[DllImport("kernel32.dll")]
			internal static extern IntPtr OpenProcess(ExploitAPI.BasicInject.ProcessAccess dwDesiredAccess, [MarshalAs(UnmanagedType.Bool)] bool bInheritHandle, int dwProcessId);

			// Token: 0x0600010C RID: 268
			[DllImport("kernel32.dll", ExactSpelling = true, SetLastError = true)]
			internal static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

			// Token: 0x0600010D RID: 269
			[DllImport("kernel32.dll", SetLastError = true)]
			internal static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, uint nSize, out UIntPtr lpNumberOfBytesWritten);

			// Token: 0x0600010E RID: 270
			[DllImport("kernel32.dll")]
			internal static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, UIntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, out IntPtr lpThreadId);

			// Token: 0x0600010F RID: 271
			[DllImport("kernel32.dll", SetLastError = true)]
			internal static extern bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, [Out] byte[] lpBuffer, int dwSize, out int lpNumberOfBytesRead);

			// Token: 0x06000110 RID: 272 RVA: 0x00008B18 File Offset: 0x00006D18
			public bool InjectDLL()
			{
				if (Process.GetProcessesByName("RobloxPlayerBeta").Length == 0)
				{
					return false;
				}
				Process process = Process.GetProcessesByName("RobloxPlayerBeta")[0];
				byte[] bytes = new ASCIIEncoding().GetBytes(AppDomain.CurrentDomain.BaseDirectory + "exploit-main.dll");
				IntPtr hModule = ExploitAPI.BasicInject.LoadLibraryA("kernel32.dll");
				UIntPtr procAddress = ExploitAPI.BasicInject.GetProcAddress(hModule, "LoadLibraryA");
				ExploitAPI.BasicInject.FreeLibrary(hModule);
				if (procAddress == UIntPtr.Zero)
				{
					return false;
				}
				IntPtr intPtr = ExploitAPI.BasicInject.OpenProcess(ExploitAPI.BasicInject.ProcessAccess.AllAccess, false, process.Id);
				if (intPtr == IntPtr.Zero)
				{
					return false;
				}
				IntPtr intPtr2 = ExploitAPI.BasicInject.VirtualAllocEx(intPtr, (IntPtr)0, (uint)bytes.Length, 12288U, 4U);
				UIntPtr uintPtr;
				IntPtr intPtr3;
				return !(intPtr2 == IntPtr.Zero) && ExploitAPI.BasicInject.WriteProcessMemory(intPtr, intPtr2, bytes, (uint)bytes.Length, out uintPtr) && !(ExploitAPI.BasicInject.CreateRemoteThread(intPtr, (IntPtr)0, 0U, procAddress, intPtr2, 0U, out intPtr3) == IntPtr.Zero);
			}

			// Token: 0x02000028 RID: 40
			[Flags]
			public enum ProcessAccess
			{
				// Token: 0x040000B7 RID: 183
				AllAccess = 1050235,
				// Token: 0x040000B8 RID: 184
				CreateThread = 2,
				// Token: 0x040000B9 RID: 185
				DuplicateHandle = 64,
				// Token: 0x040000BA RID: 186
				QueryInformation = 1024,
				// Token: 0x040000BB RID: 187
				SetInformation = 512,
				// Token: 0x040000BC RID: 188
				Terminate = 1,
				// Token: 0x040000BD RID: 189
				VMOperation = 8,
				// Token: 0x040000BE RID: 190
				VMRead = 16,
				// Token: 0x040000BF RID: 191
				VMWrite = 32,
				// Token: 0x040000C0 RID: 192
				Synchronize = 1048576
			}
		}
	}
}
